name: Build and Release (CMake Multi-Platform)

on:
  push:
    # Запускать workflow только при пуше тега (любой тег)
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      version:
        description: "Manual version override (optional)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  windows-build:
    name: Windows (MSYS2 UCRT64 → NSIS .exe)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup MSYS2 (UCRT64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-clang
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-nsis

      - name: Read version from VERSION
        shell: msys2 {0}
        run: |
          echo "VERSION=$(tr -d '\r\n' < VERSION)" >> $GITHUB_ENV
          echo "Using VERSION=$VERSION"

      - name: Configure & Build
        shell: msys2 {0}
        run: |
          cmake --preset msys-clang
          cmake --build --preset msys-clang-release

      - name: Package (NSIS .exe)
        shell: msys2 {0}
        run: |
          cpack -G NSIS --config build/msys-clang/CPackConfig.cmake
          ls -la _CPack_Packages/win64/NSIS || true

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows_installer
          path: ${{ github.workspace }}/_CPack_Packages/win64/NSIS/nicels-${{ env.VERSION }}-win64.exe
          if-no-files-found: error

  linux-deb:
    name: Ubuntu 24.04 (→ .deb)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Read version from VERSION
        run: |
          echo "VERSION=$(tr -d '\n' < VERSION)" >> $GITHUB_ENV
          echo "Using VERSION=$VERSION"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang pkg-config libssl-dev dpkg-dev

      - name: Configure & Build
        run: |
          cmake --preset linux-clang
          cmake --build --preset linux-clang-release

      - name: Package (.deb)
        run: |
          cpack -G DEB --config build/linux-clang/CPackConfig.cmake
          ls -la _CPack_Packages/Linux/DEB || true

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: Debian_package
          path: ${{ github.workspace }}/_CPack_Packages/Linux/DEB/nicels-${{ env.VERSION }}-Linux.deb
          if-no-files-found: error

  linux-rpm:
    name: CentOS Stream 10 (→ .rpm, CMake ≥ 3.28)
    runs-on: ubuntu-latest
    # Используем официальный образ CentOS Stream 10
    container:
      image: quay.io/centos/centos:stream10
    steps:
      # --- DNF wrapper (dnf5 в EL10) + базовые инструменты для checkout ---
      - name: Prepare package manager & git
        shell: bash
        run: |
          set -e
          if command -v dnf5 >/dev/null 2>&1; then
            DNF=dnf5
          else
            DNF=dnf
          fi
          echo "DNF_CMD=$DNF" >> $GITHUB_ENV
          sudo $DNF -y -q install git which

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Read version from VERSION
        shell: bash
        run: |
          echo "VERSION=$(tr -d '\n' < VERSION)" >> $GITHUB_ENV
          echo "Using VERSION=$VERSION"

      # --- Установка зависимостей (CMake >=3.28 есть в Stream 10) ---
      - name: Install build dependencies
        shell: bash
        run: |
          set -e
          if command -v dnf5 >/dev/null 2>&1; then
            DNF=dnf5
          else
            DNF=dnf
          fi
          sudo $DNF -y -q install dnf-plugins-core || true
          # Включаем CRB (если есть) и EPEL10 (если доступен), затем обновляем метаданные
          sudo $DNF -y -q config-manager --set-enabled crb || true
          sudo $DNF -y -q install epel-release || true
          sudo $DNF -y -q makecache
          # Основные инструменты
          sudo $DNF -y install cmake ninja-build clang llvm lld pkgconf-pkg-config openssl-devel rpm-build
          # Fallback на случай отсутствия ninja-build в репозиториях
          if ! command -v ninja >/dev/null 2>&1; then
            echo "ninja-build not found; installing via pip as fallback..."
            sudo $DNF -y install python3-pip
            pip3 install --upgrade pip
            pip3 install ninja
            sudo ln -sf /usr/local/bin/ninja /usr/bin/ninja || true
          fi
          echo "cmake: $(cmake --version | head -1)"
          echo "ninja: $(ninja --version || true)"
          echo "clang: $(clang --version | head -1 || true)"

      - name: Configure & Build
        shell: bash
        run: |
          cmake --preset linux-clang
          cmake --build --preset linux-clang-release

      - name: Package (.rpm)
        shell: bash
        run: |
          cpack -G RPM --config build/linux-clang/CPackConfig.cmake
          ls -la _CPack_Packages/Linux/RPM || true

      - name: Upload RPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: RPM_package
          path: ${{ github.workspace }}/_CPack_Packages/Linux/RPM/nicels-${{ env.VERSION }}-Linux.rpm
          if-no-files-found: error

  release:
    name: Create GitHub Release & Upload Assets
    needs: [windows-build, linux-deb, linux-rpm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for VERSION)
        uses: actions/checkout@v4

      - name: Read version from VERSION
        run: |
          echo "VERSION=$(tr -d '\n' < VERSION)" >> $GITHUB_ENV
          echo "Using VERSION=$VERSION"

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows_installer
          path: artifacts/windows

      - name: Download Debian artifact
        uses: actions/download-artifact@v4
        with:
          name: Debian_package
          path: artifacts/deb

      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: RPM_package
          path: artifacts/rpm

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: nicels ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Windows Installer (.exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/nicels-${{ env.VERSION }}-win64.exe
          asset_name: nicels-${{ env.VERSION }}-win64.exe
          asset_content_type: application/octet-stream

      - name: Upload Debian Package (.deb)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/deb/nicels-${{ env.VERSION }}-Linux.deb
          asset_name: nicels-${{ env.VERSION }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM Package (.rpm)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/rpm/nicels-${{ env.VERSION }}-Linux.rpm
          asset_name: nicels-${{ env.VERSION }}-Linux.rpm
          asset_content_type: application/x-rpm
