{
  "title": "Refactor Application Dependencies (Eliminate Static Singletons in App)",
  "description": "Rework the App module to explicitly manage its dependency objects (FileOwnershipResolver, SymlinkResolver, GitStatus) instead of using static free-function singletons. Currently, App.cpp defines static getters that maintain single instances of these classes for global use:contentReference[oaicite:117]{index=117}. This refactor will inject and own these dependencies within App (or pass them where needed), improving encapsulation and adhering to the dependency injection principle (no hidden singletons beyond Config).",
  "goals": [
    "Remove the static free functions `GetFileOwnershipResolver`, `GetSymlinkResolver`, and `GetGitStatus` from App.cpp and instead instantiate and hold these objects as members of the App (or relevant) class.",
    "Ensure the FileScanner is constructed with references to the newly created FileOwnershipResolver and SymlinkResolver instances (instead of calling the static getters):contentReference[oaicite:117]{index=117}:contentReference[oaicite:117]{index=117}. The same for GitStatus usage – use a member instance for any Git status checks rather than a static.",
    "Maintain a single instance of each resolver and GitStatus throughout the program’s lifetime (as currently) but under App’s management (or passed through App to FS/Renderer) rather than via global statics. This avoids uncontrolled global state while still avoiding repeated costly initialization (like libgit2 repository opens).",
    "Preserve all current behavior: performance (e.g., reuse of GitStatus data), correct resolver outputs on all platforms, and no change in output or functionality."
  ],
  "scope": [
    "Add member variables to the App class (in app.h) for FileOwnershipResolver, SymlinkResolver, and GitStatus (or smart pointers to them if initialization needs to be deferred). Initialize these in App’s constructor or `run()` before use. Alternatively, manage them in main and pass references into App if preferred (but since App is the orchestrator, having them as members is fine).",
    "Modify the App initialization (in App::run or before calling FileScanner) to construct FileOwnershipResolver, SymlinkResolver, GitStatus instances. Then pass references to those into FileScanner’s constructor (adjust FileScanner constructor if needed to accept references instead of expecting static singletons).:contentReference[oaicite:0]{index=0}",
    "Adjust all places where `GetFileOwnershipResolver()`, `GetSymlinkResolver()`, and `GetGitStatus()` were used. For example, in App::run when creating the FileScanner: replace `GetFileOwnershipResolver()` with the App’s member (e.g., `ownership_resolver_`) and similarly for symlinks:contentReference[oaicite:1]{index=1}. In `applyGitStatus` (or wherever GitStatus is used), call the App’s GitStatus instance rather than `GetGitStatus()`. Pass the GitStatus object to functions if needed (e.g., to FS or Renderer) instead of relying on a global.",
    "Ensure that the lifetime of these objects covers their usage. If they are members of App, and App exists for the program duration (likely yes, since App::run encapsulates the entire execution), that’s sufficient. Clean up any now-unused forward declarations or includes related to those static functions.",
    "Update the construction of GitStatus to call any necessary initialization (like `git_libgit2_init()` if not already called internally). If libgit2 was being implicitly initialized via static construction, make sure to explicitly initialize it once (perhaps in GitStatus constructor or App before first use) and clean up if needed on program exit (though libgit2 typically can be left to process end or use git_libgit2_shutdown)."
  ],
  "exclusions": [
    "Do not change the core logic of FileOwnershipResolver, SymlinkResolver, or GitStatus themselves (unless needed for construction). For example, no modifications to how owners are resolved or how git status is computed – just how these objects are obtained and passed around.",
    "Avoid introducing additional global singletons. Config and Theme remain singletons as designed; for these resolver/git components, prefer regular object instances managed by App or passed through.",
    "No new functionality or CL flags – this is purely an internal refactoring. The CLI and output should remain identical, so avoid any changes that would alter user-visible behavior.",
    "Do not compromise thread-safety or performance. Ensure that using member instances does not inadvertently cause multiple initializations (e.g., ensure GitStatus opens each repo only once per directory listing as before)."
  ],
  "architectural_recommendations": [
    "Using App as the owner of these objects aligns with its role as the orchestrator. App can construct the resolver and git modules in its startup sequence. This makes dependencies explicit and the code easier to understand and test (as we could inject mocks or alternate implementations into App if needed).",
    "FileScanner currently takes references to these helpers; continue to do so but now via App’s members. If FileScanner’s constructor signature is not yet updated to accept them (the tasks had forward declarations in fs_scanner.h), ensure it is updated to accept a FileOwnershipResolver and SymlinkResolver reference. This avoids FileScanner itself needing to access any global state.",
    "For GitStatus, since its usage is primarily in App (to gather statuses for a directory), you might keep using it directly in App’s logic. Alternatively, you could pass a reference of GitStatus into FileScanner or Renderer if you wanted them to trigger git status checks, but the current design centralizes that in App::applyGitStatus which is fine. So, just ensure App has access to the GitStatus instance when needed.",
    "Mind object initialization order and lifetime. If App is a long-lived object (created in main and then run), its members will exist as needed. If App is constructed inside main’s scope, ensure that any global destructors that might use these are handled (likely not an issue here). Using smart pointers for these members is optional; they can be value members since they’re lightweight classes.",
    "After refactoring, the code will have no `GetX()` free functions for these components. This improves clarity — a reader of the code sees that App explicitly has, for example, a GitStatus instance and passes it where needed, rather than magical global functions. This adheres to the \"no global free functions that manage state\" guideline."
  ],
  "cli_considerations": [
    "This change is internal and should be invisible to CLI usage. The user should not notice any difference. Ensure that all command-line options (like `--git-status`) still enable the same behavior (triggering GitStatus checks).",
    "The order of initialization remains important for CLI: e.g., enabling Windows virtual terminal processing (Platform::enableVirtualTerminal) and init_resource_paths should still occur before using these components (as they do currently). The refactor should not move these calls in a way that breaks assumptions. For instance, continue calling `init_resource_paths()` early (still in App::run) before using Theme or reading YAML files, and call Platform::enableVirtualTerminal before any color output (as done now).",
    "Testing CLI scenarios (with and without `--git-status`) should yield identical output as before. For example, if `--git-status` is off, the GitStatus instance may never be invoked, just as previously the static was never used; ensure that logic remains (likely unchanged in code flow).",
    "There should be no impact on how CLI parsing populates Config or how those config values propagate. The resolvers do use Config (e.g., whether to dereference symlinks), but they get Config passed in via FileScanner already. That mechanism remains – Config is still global (singleton) but read-only after initialization, which is acceptable per design."
  ]
}
