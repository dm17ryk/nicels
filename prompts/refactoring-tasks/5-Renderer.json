{
  "title": "Refactor Renderer Module (Formatted output generation)",
  "description": "Create a Renderer module to handle formatting and displaying the collected file information in the various output styles (long list, columns, tree, etc.). This will encapsulate all layout logic—column width calculations, applying colors/icons, and printing—in one place:contentReference[oaicite:54]{index=54}. It replaces the ad-hoc printing functions in main with a clean, testable design, likely employing strategy patterns for each format.",
  "goals": [
    "Implement dedicated rendering functions for each output format: long listing (`-l`), single-column (`-1`), horizontal/vertical columns (`-x`/`-C`), comma-separated (`-m`), and tree (`--tree`). Each should format the list of FileInfo entries appropriately, matching existing behavior.",
    "Compute and use column widths for alignment in multi-column and long outputs. For example, ensure that inode numbers, block sizes, and Git status columns line up vertically in long listing by pre-computing the max width of each field across entries:contentReference[oaicite:55]{index=55}.",
    "Integrate color and icon output: prepend icons to file names if icons are enabled (with a space separation) and wrap names/fields in ANSI color codes according to the Theme currently active (unless `--no-color`):contentReference[oaicite:56]{index=56}:contentReference[oaicite:57]{index=57}.",
    "Handle special formatting flags: `--header` should print directory header lines, `--hyperlink` (if implemented) should output hyperlinks, `--quote-name` and related quoting styles should be applied to file names, and `--zero` terminator should use NUL instead of newline."
  ],
  "scope": [
    "Move all printing logic from main into the Renderer: functions like `print_long`, `print_columns`, `print_comma_separated`, `print_tree_view` (and helpers like `format_entry_cell`, `write_line_terminator`) should be implemented within Renderer in an organized manner:contentReference[oaicite:58]{index=58}:contentReference[oaicite:59]{index=59}.",
    "Use `Config`/`Options` data to decide on formatting details (e.g., which columns to show, whether to include Git status, whether to colorize). The Renderer should accept the Config and the list of entries to produce output.",
    "Reuse Formatter utilities for specific fields: SizeFormatter for file sizes (and for human-readable vs bytes), TimeFormatter for timestamps (respecting `time_style`), and PermissionFormatter for mode strings. Renderer will call these to get formatted strings for those fields, then assemble the final output line.",
    "Implement Strategy pattern for format variants:contentReference[oaicite:60]{index=60}: e.g., a base interface IRendererStrategy and multiple implementations (or simpler: a switch in one function that calls separate internal functions for each format). This ensures the code for each format is isolated and easy to modify without affecting others."
  ],
  "exclusions": [
    "Do not gather or modify file data here (Renderer only formats what's given). For instance, it should not fetch missing metadata or change the list; the input list is assumed complete from FS+GitStatus.",
    "Avoid printing any content in Config order that isn't specified by options (no additional debug info or stray output). Perf or debug info printing (if any) should be handled elsewhere or behind flags, not in normal Renderer operations.",
    "Do not incorporate interactive behaviors (like paging or color detection) here; output is simply written to std::cout. (Color auto-detection is handled in Config/Platform before this point by setting no_color appropriately.)"
  ],
  "architectural_recommendations": [
    "Adopt the Strategy pattern as suggested:contentReference[oaicite:61]{index=61}: e.g., implement separate internal functions or classes for each format to keep the code organized. The Renderer can decide which strategy to use based on `Config.format` and `Config.tree`.",
    "Use the RAII principle for output streams if needed (though i/o is straightforward, consider saving/restoring `std::cout` format flags if you set any state like `std::setw` or `std::left/right`).",
    "Favor `std::format` (C++20/23) to construct output strings for complex combinations, instead of manual string concatenation with ostreams. For example, assembling the long listing line could be easier and faster with `std::format` using width specifiers for alignment:contentReference[oaicite:62]{index=62}.",
    "Cache computations: for instance, calculate column widths (inode, block size, file name, Git status, etc.) once per directory listing and reuse those widths during printing, as done in current code (compute_inode_width, compute_block_width):contentReference[oaicite:63]{index=63}:contentReference[oaicite:64]{index=64}."
  ],
  "cli_considerations": [
    "Respect `--width=COLS`: if a user specifies an output width, Renderer should use that for wrapping or column calculations. If width is 0 (no limit), treat it as a very large number or no wrapping (current behavior treats 0 as unlimited):contentReference[oaicite:65]{index=65}.",
    "Implement `--color` behavior: If color mode is \"never\" or `Config.no_color` is true, ensure that all color codes are suppressed (Theme should provide empty or reset codes accordingly, or Renderer simply doesn’t wrap text in color). If \"auto\", the Config will have decided based on isatty; Renderer just follows Config.no_color in either case.",
    "`--quoting-style` and related flags (`-Q`, `-N`, `-b`) influence how filenames are presented. Integrate the existing logic (apply_quoting, apply_control_char_handling) into Renderer: e.g., after getting a base name, apply control char filtering if `hide_control_chars`, then quote if necessary:contentReference[oaicite:66]{index=66}:contentReference[oaicite:67]{index=67}.",
    "Tree view (`--tree`): ensure that Renderer prints the tree structure with the correct branch (`│`, `├─`, `└─` characters or similar ASCII fallback) as currently done. Maintain depth limitation if `--tree=DEPTH` was specified (i.e., do not print deeper than that level). Also, in tree mode, directory entries appear with their children indented below them, unlike flat mode:contentReference[oaicite:68]{index=68}:contentReference[oaicite:69]{index=69} – this should be preserved exactly."
  ]
}
