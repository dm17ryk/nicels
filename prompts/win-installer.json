{
  "title": "Create Windows Installer Package for nicels (nls.exe)",
  "repo_state": "All changes committed. Work off the latest master branch.",
  "vcs_commands": [
    "git checkout master",
    "git pull --rebase",
    "git submodule update --init --recursive"
  ],
  "description": "Now that **nicels** (`nls`) is buildable and its configuration files can be loaded from standard locations, the next step is to distribute it with a proper **Windows installer**. We need an installer that meets all the specified requirements: it should support both per-user and system-wide installation, bundle the standalone `nls.exe` along with all its YAML config files into a `yaml` directory, add the program to the PATH, and handle upgrades or downgrades seamlessly. After evaluating options, **using NSIS (Nullsoft Installer)** is the best choice for these needs. NSIS is a free, widely-used Windows installer system that allows flexible scripting. It can present the user with an \"All users vs. Just me\" install option and modify environment variables. We will integrate NSIS through CMake’s **CPack** to automate the packaging process as part of our build. (Alternatives like WiX/MSI or Inno Setup exist, but NSIS via CPack provides a straightforward solution with minimal overhead for our CLI tool.) This task will involve writing the installer script/configuration and updating our build scripts so that running CPack produces an installer executable. The installer will ensure `nls.exe` and its YAML files are installed in a consistent location and that the PATH is updated, all while allowing both administrative (machine-wide) and non-admin (user-only) installs. Below we outline the goals and steps to implement the Windows installer packaging.",
  "goals": [
    "**Support Per-User and All-User Installation:** The installer must accommodate both single-user installations (no admin rights required) and all-users installations (requires admin). If the user has administrative privileges, they should be able to choose whether to install for all users (e.g. under Program Files) or just for the current user (e.g. under the user’s local AppData). If the installer is run without admin rights, it should automatically fall back to a per-user install in the user’s profile. This ensures that even non-admin users can install and use **nls**, while admins get the choice of a system-wide setup.",
    "**Include YAML Configuration Files:** All default `.yaml` files (themes, color palettes, icon maps, etc.) must be packaged and installed into a `yaml` subfolder within the installation directory. For example, if `nls` is installed to `C:\\Program Files\\nicels\\`, then the YAML files should reside in `C:\\Program Files\\nicels\\yaml\\`. The program’s existing search path logic will locate these files at runtime. Including the YAML folder in the installer guarantees that `nls` has access to its necessary configuration data when installed, just as it does in a development environment.",
    "**Add **nls** to PATH:** The installer should add the directory containing `nls.exe` to the system PATH environment variable (for all-user installs) or the current user’s PATH (for per-user installs). This allows users to invoke `nls` from any command prompt without manually editing their PATH. The installer UI can include an option (checkbox) like \"Add nls to PATH\" – enabled by default – so the user can opt out if desired. Under the hood, this will entail setting the appropriate registry entries for environment variables (in **HKLM** for system-wide or **HKCU** for user-only). After installation, opening a new terminal should recognize the `nls` command.",
    "**Upgrade and Downgrade Friendly:** Ensure that running a new installer will seamlessly replace any existing version of **nicels**. The installer should detect if an older *or newer* version is already installed. In such cases, it should prompt the user and then automatically uninstall the previous version before proceeding, or otherwise overwrite the existing installation. This guarantees that upgrades are clean (no duplicate installations) and also allows users to revert to an older version if needed (downgrade) without errors. To implement this, use a consistent uninstall registry key for nicels so that any new installer can find the previous installation. The installer script should handle invoking the old version’s uninstaller quietly or remove the old files before installing the new ones.",
    "**Automate Packaging via CMake/CPack:** Integrate the Windows installer creation into our build system. Update the CMake configuration to use **CPack** with the NSIS generator, so that building the project can produce the installer in one step. CPack settings will define the installer properties (name, version, etc.) and include all necessary files. This integration means that whenever we make a release, we can easily generate an updated installer for Windows. It also helps ensure that the correct files (the `nls.exe` binary and YAML configs) are collected from the build/install directories. The packaging process should be reproducible and documented (e.g., \"run `cpack -G NSIS` to create the installer\").",
    "**Update Documentation:** Reflect the new installation method in our documentation. For example, in the **README.md**, add a Windows installation section instructing users to use the installer (and mentioning options like adding to PATH and where config files are installed). Also note that non-admin installs are supported. Providing clear instructions and any caveats (such as needing to restart the terminal for PATH changes to take effect) will improve user experience."
  ],
  "scope": [
    "**Extend CMake Install for YAML Files:** Modify the CMake build scripts to ensure all necessary YAML configuration files are included in the installation stage. For instance, if the source repository contains a `yaml/` directory with default config files (e.g. `colors.yaml`, `dark_colors.yaml`, `files.yaml`, etc.), add a CMake install rule to copy this directory. This could be done with an `install(DIRECTORY ...)` command, installing the `yaml` folder to the appropriate location in the install prefix (most likely alongside the `bin` directory). After this change, running `cmake --install` on Windows should result in an install tree that has `bin/nls.exe` and a `yaml/` folder with all config files. This forms the basis for what the installer will package.",
    "**CPack Configuration for NSIS:** Enable and configure CPack in CMake for the NSIS generator. In the project’s `CMakeLists.txt`, include the CPack module (e.g. `include(CPack)`) and set the necessary **CPack variables** to define the installer. Key settings will include the package name, package version (which can be taken from the `VERSION` file or `project()` version), and NSIS-specific options. For example, set `CPACK_GENERATOR` to `\"NSIS\"` for Windows, `CPACK_PACKAGE_NAME` (e.g. \"nicels\"), and `CPACK_PACKAGE_INSTALL_DIRECTORY` (the default install dir name, e.g. \"nicels\"). Use `CPACK_NSIS_MODIFY_PATH ON` to automatically include the \"Add to PATH\" option in the installer UI. Also set `CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON` – this instructs the NSIS installer to check for a previous installation and offer to uninstall it first, handling upgrades/downgrades. Make sure to define `CPACK_PACKAGE_VENDOR`, `CPACK_PACKAGE_CONTACT` (author or support email), and other metadata as needed for a polished installer. Once configured, running `cpack -G NSIS` after building should generate an `*.exe` installer that packages the installed files (nls.exe, YAMLs, etc.).",
    "**Custom NSIS for Install Scope (All-users vs Just-me):** Because we need to support both per-machine and per-user installations, we will introduce NSIS script logic to handle install scope. The default NSIS generated by CPack installs to a system directory and requests admin rights; we want to adjust this behavior. We can utilize NSIS scripting via CPack’s extension hooks or a custom template. Specifically, set the NSIS *execution level* to user (so the installer can run without admin by default), and then detect if the user is an admin. If running with admin privileges, present a dialog (or a radio-button choice) for \"Install for all users\" vs \"Install just for me\". If the user chooses all-users (and has admin rights), set the installation directory to something like `$PROGRAMFILES\\nicels` (e.g. `C:\\Program Files\\nicels`). If the user chooses per-user (or if the installer is not elevated), use a directory in the user’s profile, such as `$LOCALAPPDATA\\Programs\\nicels` (which expands to the user’s AppData Local folder). This logic can be implemented by injecting NSIS instructions: for example, using `InstType` or a custom page to let the user pick the install mode, and NSIS’s built-in variables like `$LOCALAPPDATA` and `$PROGRAMFILES`. Ensure that the installer’s directory selection dialog defaults to the correct path depending on the mode. We will likely leverage `CPACK_NSIS_EXTRA_INSTALL_COMMANDS` or provide a custom `NSIS.template.in` to achieve this within CPack. The outcome should be a single installer executable that intelligently handles both cases (with appropriate privileges).",
    "**Environment Variable Modification:** Implement the PATH update in the installer. With CPack NSIS, setting `CPACK_NSIS_MODIFY_PATH` already adds a checkbox for the user to choose adding the install dir to PATH. We should verify that this works for both per-user and all-user scenarios. By default, NSIS will add to the system PATH if the install is all-users (since it runs elevated) or to the user PATH if not. If we’re writing custom NSIS script logic for install scope, ensure to adjust the registry write accordingly: use the `WriteRegStr HKCU` for user PATH or `WriteRegStr HKLM` for system PATH. Also include corresponding uninstall steps to remove the PATH entry upon uninstall. This can be done via `CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS` or script lines to delete the value we added. The end result is that after installation, the user can open a new command prompt and run `nls` from any location. Document in the installer UI or README that a logoff/login or new shell is needed for PATH changes to load.",
    "**Uninstall and Upgrade Behavior:** Take measures to ensure a clean upgrade/downgrade process. Using `CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL` (as noted) will cause the generated installer to check for an existing installation (it looks up an uninstall key in the Windows Registry that CPack NSIS sets). We should make sure to define `CPACK_PACKAGE_INSTALL_REGISTRY_KEY` (e.g., \"nicels\") consistently so that this detection works across versions. If a prior version is found, the installer will prompt \"An older version is detected, uninstall it first?\" – this covers upgrades and downgrades alike. Additionally, verify that the **uninstaller** (generated as `Uninstall.exe`) removes all installed files and the PATH entry. We may customize the uninstaller via NSIS script to remove the `yaml` directory and any empty parent folders, and to delete the PATH variable entry. Test the scenario of installing version X over version Y (both directions) to confirm that only one entry remains in Add/Remove Programs and that files aren’t duplicated.",
    "**Testing the Installer:** After implementing the above, perform local tests of the installer. Generate the installer (`.exe`) using CPack or the build system, then run it in different scenarios: as a normal user vs. as an admin, installing for just-me vs all-users. Verify that in a per-user install, no UAC prompt appears and files go to the user’s app folder, and in an all-users install, UAC is triggered and files go to Program Files. Check that `nls` runs correctly after installation (try `nls --help` in a new terminal to confirm the PATH was set if that option was selected). Also test uninstalling via the Control Panel or the Uninstall.exe to ensure it cleans up files and the PATH. Make any adjustments to the NSIS script if problems are found (for example, permissions issues writing to PATH or not removing the old version properly). Only once the installer behaves correctly in all cases should this task be considered complete.",
    "**Documentation Updates:** Finally, update **README.md** (and any other relevant docs) to mention the Windows installer. For instance, under an \"Installation\" section, add instructions for Windows users: explain that they can download the installer from the releases, run it, choose installation scope, and that the installer will put `nls` in their PATH. Mention where the YAML files are installed (and that advanced users can customize them in the per-user config directory `%APPDATA%\\.nicels\\yaml` if they wish). Also note that if upgrading, the installer will handle removing the old version. Keeping the documentation in sync with the new distribution method will help users smoothly transition from building from source to using the installer."
  ],
  "exclusions": [
    "**No Changes to Core Functionality:** This task should not alter the core behavior of `nls` except for what's required to support installation. Avoid modifying the actual program logic or how it reads config (those were handled in prior tasks). Focus only on packaging. The presence or absence of an installation should not change how `nls` operates beyond finding its YAML files in the installed location.",
    "**Do Not Embed Config Files into Binary:** We want the YAML files to be external and installed in the filesystem (as outlined). Do not attempt to compile the YAML data into the `nls` executable. The installer should carry and install the actual `.yaml` files so that users can view or modify them if needed and so that updates to themes/icons can be delivered by replacing these files.",
    "**Stick to NSIS/CPack (No Proprietary Tools):** Use NSIS for the installer as planned, and do not introduce other packaging formats (like MSI/MSIX or proprietary installer builders) in this implementation. We aim for an open-source solution that integrates with our CMake build. (Future tasks might cover MSI or MSIX if needed, but not in this scope.)",
    "**Preserve Portable Usage:** Ensure that these packaging changes do not remove the ability to run `nls` from the build directory or a portable context. The installer is an *addition* for end-user convenience. Developers and advanced users should still be able to run the binary with local YAML files (as before) without going through installation. Thus, do not hard-code paths in the application; rely on the search path logic for finding YAMLs (which already handles both installed and unpackaged scenarios)."
  ],
  "final_output_instructions": [
    "Provide the updated build script (CMakeLists.txt) with CPack/NSIS settings, and any new files (such as an NSIS script template or custom NSIS commands) added to the project. Also include the added YAML install directives. If a custom NSIS script file (e.g., `nicels.nsi`) is created, include its full contents. List all changes to existing files (like CMakeLists.txt or README.md) and their new content. The response should effectively show the **diff** or new versions for each affected file, ready to be applied to the repository.",
    "Ensure that the delivered installer configuration is complete and that building the project followed by running CPack yields a working installer. Include in the output any relevant new CMake code and the NSIS script logic for handling user vs all-user installs and PATH addition. The README update should clearly instruct users on using the installer. All file content should be provided in the answer, as this will be used by Codex to commit the changes."
  ]
}
