{
  "title": "Refactor 'nicels' to modern OOP C++23",
  "goals": [
    "Analyze the entire 'nicels', all files in the repository and refactor all the code to idiomatic, modern, object-oriented C++ using C++23 features.",
    "Eliminate all C-like code: no global variables; no free/global functions.",
    "Preserve all current behavior and CLI compatibility.",
    "Currently cli implemented with CLI11 library from third-party submodule. Maintain this dependency.",
    "Currently Git status handled via libgit2 with excellent performance. Maintain this dependency, statically linked as before",
    "libgit2 is git submodule, system libgit2 not used, should remain this way.",
    "Currently build implemented with CMake, supporting at least Linux (GCC/Clang) and Windows (MSYS2 UCRT with Clang), should remain this way."
  ],
  "context": {
    "repo_state": "All changes committed. Work off the latest master branch.",
    "vcs_commands": [
      "git checkout master",
      "git pull --rebase",
      "git submodule update --init --recursive"
    ],
    "third_party": {
      "cli11_submodule_path": "third-party/cli11",
      "libgit2_submodule_path": "third-party/libgit2"
    },
    "testing_dirs": {
      "windows": "./test/win",
      "linux": "./test/lin"
    },
    "platforms": [
      "Windows (MSYS2 UCRT environment)",
      "Linux (glibc)"
    ],
    "compilers": {
      "cmake_minimum_version": "4.1.1",
      "cpp_standard": "23",
      "windows_preferred": "clang 21.1.1 (ucrt64)",
      "windows_current_gpp": "g++.exe (Rev8, MSYS2) 15.2.0",
      "linux": "clang >= 16 and/or g++ >= 12"
    },
    "dependencies": {
      "libgit2": "for Git status; used as git submodule, statically linked",
      "CLI11": "for CLI parsing; used from third-party/cli11 submodule"
    }
  },
  "high_level_design": {
    "design_patterns": [
      "Singleton",
      "Strategy",
      "Builder",
      "PImpl",
      "RAII",
      "Command",
      "Visitor"
    ],
    "coding_guidelines": [
      "C++23; prefer <filesystem>, <format>, <chrono>, std::expected (or tl::expected).",
      "No raw new/delete; use smart pointers or stack objects.",
      "No global variables; no free functions that mutate shared state.",
      "Prefer constexpr, std::span, std::string_view, ranges where beneficial.",
      "Thread-safe where applicable; avoid unnecessary dynamic allocation in hot paths.",
      "Zero warnings with -Wall -Wextra -Wpedantic; enable -Werror optionally."
    ]
  },
  "cli_requirements": {
    "library": "CLI11 from third-party/cli11 submodule",
    "compatibility": "Preserve all current CLI options and functionality. deffinition: see 'cli_definition'.",
    "behavioral_parity": "Output/semantics should match current tool behavior on both Windows and Linux."
  },
  "performance": {
    "hotspots": [
      "Git status: use libgit2 efficiently.",
      "Filesystem: use std::filesystem iterators with error_code; avoid repeated stat.",
      "Formatting: cache widths, reuse buffers, avoid iostream sync; prefer std::format."
    ]
  },
  "deliverables": [
    "Refactored C++23 source code implementing the architecture above.",
    "CMakeLists.txt and any toolchain/preset files for MSYS2 UCRT clang."
  ],
  "acceptance_criteria": [
    "Compiles cleanly on Linux and Windows (MSYS2 UCRT) with C++23 in Debug and Release.",
    "CLI options and behavior preserved; output parity validated manually. deffinition: see 'cli_definition'.",
    "No global variables; Singletons are explicit and minimal.",
    "No C-style code; modern, idiomatic C++ constructs used.",
    "Performance equal or better than current, especially with Git status enabled."
  ],
  "step_by_step_plan": [
    "Sync repo and submodules.",
    "Audit codebase; produce a short refactor map (files -> new modules).",
    "Refactor incrementally: Config, Cli, FS, Renderer, GitStatus.",
    "Replace globals with injected dependencies or Singletons; remove C-like code.",
    "Wire CLI11; ensure help, validation, and defaults are comprehensive. deffinition: see 'cli_definition'.",
    "Final polish: warnings-as-errors (optional), format, lint."
  ],
  "constraints_and_notes": [
    "Prefer #ifdef _WIN32 for platform specifics to keep runtime fast.",
    "Do not change current behavior; ensure parity with current outputs."
  ]
}
